# Generated from Gram.g4 by ANTLR 4.10.1
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,27,208,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,
        26,7,26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,1,0,1,0,1,1,1,1,
        1,2,1,2,1,3,1,3,1,4,1,4,1,5,1,5,1,6,1,6,1,7,1,7,1,7,1,7,1,8,1,8,
        1,8,1,8,1,9,1,9,1,9,1,10,1,10,1,10,1,11,1,11,1,11,1,12,1,12,1,12,
        1,13,1,13,1,13,1,14,1,14,1,14,1,15,1,15,1,15,1,16,1,16,1,16,1,17,
        1,17,1,17,1,17,1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,19,1,19,
        1,19,1,19,1,19,1,19,1,19,1,19,1,19,3,19,131,8,19,1,20,1,20,1,20,
        1,20,1,20,1,21,1,21,5,21,140,8,21,10,21,12,21,143,9,21,1,22,1,22,
        1,22,5,22,148,8,22,10,22,12,22,151,9,22,1,22,1,22,1,22,1,22,5,22,
        157,8,22,10,22,12,22,160,9,22,1,22,3,22,163,8,22,1,23,3,23,166,8,
        23,1,23,1,23,1,24,1,24,1,24,5,24,173,8,24,10,24,12,24,176,9,24,3,
        24,178,8,24,1,25,4,25,181,8,25,11,25,12,25,182,1,25,1,25,1,26,3,
        26,188,8,26,1,26,1,26,1,26,4,26,193,8,26,11,26,12,26,194,1,27,1,
        27,1,27,1,28,1,28,1,28,3,28,203,8,28,1,29,1,29,1,30,1,30,0,0,31,
        1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,10,21,11,23,12,25,13,
        27,14,29,15,31,16,33,17,35,18,37,19,39,20,41,21,43,22,45,23,47,24,
        49,25,51,26,53,27,55,0,57,0,59,0,61,0,1,0,7,2,0,39,39,92,92,2,0,
        34,34,92,92,1,0,49,57,1,0,48,57,3,0,9,10,13,13,32,32,9,0,34,34,39,
        39,47,47,92,92,98,98,102,102,110,110,114,114,116,116,2,0,65,90,97,
        122,218,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,
        0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,
        0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,
        0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,35,1,0,0,0,0,37,1,0,0,0,0,39,1,0,
        0,0,0,41,1,0,0,0,0,43,1,0,0,0,0,45,1,0,0,0,0,47,1,0,0,0,0,49,1,0,
        0,0,0,51,1,0,0,0,0,53,1,0,0,0,1,63,1,0,0,0,3,65,1,0,0,0,5,67,1,0,
        0,0,7,69,1,0,0,0,9,71,1,0,0,0,11,73,1,0,0,0,13,75,1,0,0,0,15,77,
        1,0,0,0,17,81,1,0,0,0,19,85,1,0,0,0,21,88,1,0,0,0,23,91,1,0,0,0,
        25,94,1,0,0,0,27,97,1,0,0,0,29,100,1,0,0,0,31,103,1,0,0,0,33,106,
        1,0,0,0,35,109,1,0,0,0,37,113,1,0,0,0,39,130,1,0,0,0,41,132,1,0,
        0,0,43,137,1,0,0,0,45,162,1,0,0,0,47,165,1,0,0,0,49,177,1,0,0,0,
        51,180,1,0,0,0,53,187,1,0,0,0,55,196,1,0,0,0,57,202,1,0,0,0,59,204,
        1,0,0,0,61,206,1,0,0,0,63,64,5,40,0,0,64,2,1,0,0,0,65,66,5,41,0,
        0,66,4,1,0,0,0,67,68,5,91,0,0,68,6,1,0,0,0,69,70,5,93,0,0,70,8,1,
        0,0,0,71,72,5,44,0,0,72,10,1,0,0,0,73,74,5,46,0,0,74,12,1,0,0,0,
        75,76,5,36,0,0,76,14,1,0,0,0,77,78,5,78,0,0,78,79,5,111,0,0,79,80,
        5,116,0,0,80,16,1,0,0,0,81,82,5,65,0,0,82,83,5,110,0,0,83,84,5,100,
        0,0,84,18,1,0,0,0,85,86,5,79,0,0,86,87,5,114,0,0,87,20,1,0,0,0,88,
        89,5,69,0,0,89,90,5,113,0,0,90,22,1,0,0,0,91,92,5,78,0,0,92,93,5,
        101,0,0,93,24,1,0,0,0,94,95,5,76,0,0,95,96,5,116,0,0,96,26,1,0,0,
        0,97,98,5,76,0,0,98,99,5,101,0,0,99,28,1,0,0,0,100,101,5,71,0,0,
        101,102,5,116,0,0,102,30,1,0,0,0,103,104,5,71,0,0,104,105,5,101,
        0,0,105,32,1,0,0,0,106,107,5,73,0,0,107,108,5,110,0,0,108,34,1,0,
        0,0,109,110,5,72,0,0,110,111,5,97,0,0,111,112,5,115,0,0,112,36,1,
        0,0,0,113,114,5,77,0,0,114,115,5,97,0,0,115,116,5,116,0,0,116,117,
        5,99,0,0,117,118,5,104,0,0,118,119,5,101,0,0,119,120,5,115,0,0,120,
        38,1,0,0,0,121,122,5,84,0,0,122,123,5,114,0,0,123,124,5,117,0,0,
        124,131,5,101,0,0,125,126,5,70,0,0,126,127,5,97,0,0,127,128,5,108,
        0,0,128,129,5,115,0,0,129,131,5,101,0,0,130,121,1,0,0,0,130,125,
        1,0,0,0,131,40,1,0,0,0,132,133,5,78,0,0,133,134,5,111,0,0,134,135,
        5,110,0,0,135,136,5,101,0,0,136,42,1,0,0,0,137,141,3,59,29,0,138,
        140,3,57,28,0,139,138,1,0,0,0,140,143,1,0,0,0,141,139,1,0,0,0,141,
        142,1,0,0,0,142,44,1,0,0,0,143,141,1,0,0,0,144,149,5,39,0,0,145,
        148,3,55,27,0,146,148,8,0,0,0,147,145,1,0,0,0,147,146,1,0,0,0,148,
        151,1,0,0,0,149,147,1,0,0,0,149,150,1,0,0,0,150,152,1,0,0,0,151,
        149,1,0,0,0,152,163,5,39,0,0,153,158,5,34,0,0,154,157,3,55,27,0,
        155,157,8,1,0,0,156,154,1,0,0,0,156,155,1,0,0,0,157,160,1,0,0,0,
        158,156,1,0,0,0,158,159,1,0,0,0,159,161,1,0,0,0,160,158,1,0,0,0,
        161,163,5,34,0,0,162,144,1,0,0,0,162,153,1,0,0,0,163,46,1,0,0,0,
        164,166,5,45,0,0,165,164,1,0,0,0,165,166,1,0,0,0,166,167,1,0,0,0,
        167,168,3,49,24,0,168,48,1,0,0,0,169,178,5,48,0,0,170,174,7,2,0,
        0,171,173,7,3,0,0,172,171,1,0,0,0,173,176,1,0,0,0,174,172,1,0,0,
        0,174,175,1,0,0,0,175,178,1,0,0,0,176,174,1,0,0,0,177,169,1,0,0,
        0,177,170,1,0,0,0,178,50,1,0,0,0,179,181,7,4,0,0,180,179,1,0,0,0,
        181,182,1,0,0,0,182,180,1,0,0,0,182,183,1,0,0,0,183,184,1,0,0,0,
        184,185,6,25,0,0,185,52,1,0,0,0,186,188,5,45,0,0,187,186,1,0,0,0,
        187,188,1,0,0,0,188,189,1,0,0,0,189,190,3,49,24,0,190,192,5,46,0,
        0,191,193,7,3,0,0,192,191,1,0,0,0,193,194,1,0,0,0,194,192,1,0,0,
        0,194,195,1,0,0,0,195,54,1,0,0,0,196,197,5,92,0,0,197,198,7,5,0,
        0,198,56,1,0,0,0,199,203,3,59,29,0,200,203,3,61,30,0,201,203,5,95,
        0,0,202,199,1,0,0,0,202,200,1,0,0,0,202,201,1,0,0,0,203,58,1,0,0,
        0,204,205,7,6,0,0,205,60,1,0,0,0,206,207,2,48,57,0,207,62,1,0,0,
        0,15,0,130,141,147,149,156,158,162,165,174,177,182,187,194,202,1,
        6,0,0
    ]

class GramLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    T__0 = 1
    T__1 = 2
    T__2 = 3
    T__3 = 4
    T__4 = 5
    T__5 = 6
    T__6 = 7
    NOT = 8
    AND = 9
    OR = 10
    EQ = 11
    NE = 12
    LT = 13
    LE = 14
    GT = 15
    GE = 16
    IN = 17
    HAS = 18
    MATCHES = 19
    BOOL = 20
    NULL = 21
    NAME = 22
    STRING = 23
    INT = 24
    POS_INT = 25
    SP = 26
    FLOAT = 27

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'('", "')'", "'['", "']'", "','", "'.'", "'$'", "'Not'", "'And'", 
            "'Or'", "'Eq'", "'Ne'", "'Lt'", "'Le'", "'Gt'", "'Ge'", "'In'", 
            "'Has'", "'Matches'", "'None'" ]

    symbolicNames = [ "<INVALID>",
            "NOT", "AND", "OR", "EQ", "NE", "LT", "LE", "GT", "GE", "IN", 
            "HAS", "MATCHES", "BOOL", "NULL", "NAME", "STRING", "INT", "POS_INT", 
            "SP", "FLOAT" ]

    ruleNames = [ "T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", 
                  "NOT", "AND", "OR", "EQ", "NE", "LT", "LE", "GT", "GE", 
                  "IN", "HAS", "MATCHES", "BOOL", "NULL", "NAME", "STRING", 
                  "INT", "POS_INT", "SP", "FLOAT", "ESC", "NAME_CHARS", 
                  "ALPHA", "DIGIT" ]

    grammarFileName = "Gram.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.10.1")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


